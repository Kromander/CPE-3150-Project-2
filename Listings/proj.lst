C51 COMPILER V9.54   PROJ                                                                  05/07/2017 18:27:06 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE PROJ
OBJECT MODULE PLACED IN .\Objects\proj.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE proj.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\proj
                    -.lst) TABS(2) OBJECT(.\Objects\proj.obj)

line level    source

   1          #include <reg932.h>
   2          #include <uart.h>
   3          
   4          #define OSC_FREQ    7372800
   5          
   6          #define C4        ((OSC_FREQ/4)/261.63) 
   7          #define Db4       ((OSC_FREQ/4)/277.18)
   8          #define D4        ((OSC_FREQ/4)/293.67)
   9          #define Eb4       ((OSC_FREQ/4)/311.13)
  10          #define E4        ((OSC_FREQ/4)/329.63)
  11          #define F4        ((OSC_FREQ/4)/349.23)
  12          #define Gb4       ((OSC_FREQ/4)/369.99)
  13          #define G4        ((OSC_FREQ/4)/392.00)
  14          #define Ab4       ((OSC_FREQ/4)/415.30)
  15          #define A4        ((OSC_FREQ/4)/440.00) 
  16          #define Bb4       ((OSC_FREQ/4)/466.16) 
  17          #define B4        ((OSC_FREQ/4)/493.88) 
  18          #define C5        ((OSC_FREQ/4)/523.25) 
  19          #define Db5       ((OSC_FREQ/4)/554.37) 
  20          #define D5        ((OSC_FREQ/4)/587.33) 
  21          #define Eb5       ((OSC_FREQ/4)/622.25) 
  22          #define E5        ((OSC_FREQ/4)/659.26) 
  23          #define F5        ((OSC_FREQ/4)/698.46) 
  24          #define Gb5       ((OSC_FREQ/4)/739.99) 
  25          #define G5        ((OSC_FREQ/4)/783.99) 
  26          #define Ab5       ((OSC_FREQ/4)/830.61) 
  27          #define A5        ((OSC_FREQ/4)/880.00) 
  28          #define Bb5       ((OSC_FREQ/4)/932.33) 
  29          #define B5        ((OSC_FREQ/4)/987.77) 
  30          #define C6        ((OSC_FREQ/4)/1046.5) 
  31          #define Db6       ((OSC_FREQ/4)/1108.7) 
  32          #define D6        ((OSC_FREQ/4)/1174.7) 
  33          #define Eb6       ((OSC_FREQ/4)/1244.5) 
  34          #define E6        ((OSC_FREQ/4)/1318.5) 
  35          #define F6        ((OSC_FREQ/4)/1396.9) 
  36          #define Gb6       ((OSC_FREQ/4)/1480.0) 
  37          #define G6        ((OSC_FREQ/4)/1568.0) 
  38          #define Ab6       ((OSC_FREQ/4)/1661.2) 
  39          #define A6        ((OSC_FREQ/4)/1760.0) 
  40          #define Bb6       ((OSC_FREQ/4)/1864.7) 
  41          #define B6        ((OSC_FREQ/4)/1975.5) 
  42          
  43          sbit light1 = P2^4;
  44          sbit light2 = P0^5;
  45          sbit light3 = P2^7;
  46          sbit light4 = P0^6;
  47          sbit light5 = P1^6;
  48          sbit light6 = P0^4;
  49          sbit light7 = P2^5;
  50          sbit light8 = P0^7;
  51          sbit light9 = P2^6;
  52          
  53          sbit button1 = P2^0;
  54          sbit button2 = P0^1;
C51 COMPILER V9.54   PROJ                                                                  05/07/2017 18:27:06 PAGE 2   

  55          sbit button3 = P2^3;
  56          sbit button4 = P0^2;
  57          sbit button5 = P1^4;
  58          sbit button6 = P0^0;
  59          sbit button7 = P2^1;
  60          sbit button8 = P0^3;
  61          sbit button9 = P2^2;
  62          
  63          sbit speaker = P1^7;
  64          
  65          static bit mtxbusy;
  66          
  67          unsigned char mode;
  68          unsigned int buttonDelay;
  69                        
  70          unsigned char smStart;
  71          unsigned char smEnd;
  72          unsigned char rrStart;
  73          unsigned char rrEnd;
  74          unsigned int freq;
  75          unsigned int dur;
  76          unsigned char index;
  77          
  78          void delay(unsigned int time);
  79          void playsound(unsigned int dur, unsigned int del);
  80          void piano(void);
  81          void uart_init (void);
  82          void uart_isr(void);
  83          void uart_transmit(char c);
  84          void sqr_wave();
  85          void allstar();
  86          void rickroll();
  87          
  88          code int SmashMouth[] = {G5, D6, B5, B5, A5, G5, G5, C6, B5, B5, A5, A5, G5, 0, G5, D6, B5, B5, A5, A5, G5
             -, G5, E5, D5, 0};
  89          
  90          code int durSmashMouth[] = {64, 32, 32, 64, 32, 32, 32, 64, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
             -, 32, 32, 64, 64, 32};
  91          
  92          code int GiveYouUp[] = {G5, A5, C6, A5, E6, E6, D6, G5, A5, B5, G5, 
  93                                D6, D6, C6, B5, A5, G5, A5, B5, G5, C6, D6, B5,
  94                                A5, G5, 0, G5, D6, C6, 0};
  95          
  96          code int durGiveYouUp[] = {16, 16, 16, 16, 32, 32, 64, 16, 16, 16, 16, 32, 32, 32, 16, 32, 16, 16, 16, 16,
             - 64, 32, 48, 16, 32, 32, 32, 64, 64, 32};
  97          
  98          char trans;
  99          
 100          void main(void) {
 101   1        mode = 1;
 102   1        buttonDelay = 15000;
 103   1        
 104   1        TMOD = 0x21;
 105   1        EA = 1;
 106   1        ET0 = 1;
 107   1        
 108   1        //initialize the ports so buttons and lights work
 109   1        P2M1=0;
 110   1        P1M1=0x2F&P1M1;
 111   1        P0M1=0;
 112   1        
 113   1        trans = 65;
C51 COMPILER V9.54   PROJ                                                                  05/07/2017 18:27:06 PAGE 3   

 114   1        uart_init(); //initialize serial stuff
 115   1        
 116   1        while(1) { //do FOREVER!!! MUWAHAHAHA
 117   2          light8=0;
 118   2          
 119   2          //mode 1 = Smashmouth
 120   2          //mode 2 = rickroll
 121   2          //mode 3 = Piano
 122   2          
 123   2          
 124   2          //display which mode you are in
 125   2          if (mode == 1) {
 126   3            light3 = 0;
 127   3            light2 = 1;
 128   3          } else if (mode == 2) {
 129   3            light2 = 0;
 130   3            light3 = 1;
 131   3          } else if (mode == 3) {
 132   3            light2 = 0;
 133   3            light3 = 0;
 134   3          }
 135   2          
 136   2          //increment button.
 137   2          if (!button9) {
 138   3            light9 = 0;
 139   3            if (mode >= 3) {
 140   4              mode = 0;
 141   4              delay(buttonDelay);
 142   4            } else {
 143   4              mode++;
 144   4              delay(buttonDelay);
 145   4            }
 146   3            light9 = 1;
 147   3          }
 148   2          
 149   2          //decrement button
 150   2          if (!button7) {
 151   3            light7 = 0;
 152   3            if (mode <= 1) {
 153   4              mode = 3;
 154   4              delay(buttonDelay);
 155   4            } else {
 156   4              mode--;
 157   4              delay(buttonDelay);
 158   4            }
 159   3            light7 = 1;
 160   3          }
 161   2          
 162   2          //selection mode
 163   2          if (!button8) { //mode is selected
 164   3            if (mode == 1) {
 165   4              uart_transmit('S');
 166   4              uart_transmit('M');
 167   4              uart_transmit('A');
 168   4              uart_transmit('S');
 169   4              uart_transmit('H');
 170   4              uart_transmit(' ');
 171   4              uart_transmit('M');
 172   4              uart_transmit('O');
 173   4              uart_transmit('U');
 174   4              uart_transmit('T');
 175   4              uart_transmit('H');
C51 COMPILER V9.54   PROJ                                                                  05/07/2017 18:27:06 PAGE 4   

 176   4              uart_transmit(' ');
 177   4              
 178   4              allstar();
 179   4              delay(buttonDelay);
 180   4            } else if (mode == 2) {
 181   4              uart_transmit('R');
 182   4              uart_transmit('I');
 183   4              uart_transmit('C');
 184   4              uart_transmit('K');
 185   4              uart_transmit(' ');
 186   4              uart_transmit('R');
 187   4              uart_transmit('O');
 188   4              uart_transmit('L');
 189   4              uart_transmit('L');
 190   4              uart_transmit(' ');
 191   4              
 192   4              rickroll();
 193   4              delay(buttonDelay);
 194   4            } else if (mode == 3) {
 195   4              light2=1;
 196   4              light3=1;
 197   4              light8=1;
 198   4              delay(buttonDelay);
 199   4              piano();
 200   4            }
 201   3          }
 202   2        }
 203   1      }
 204          
 205          
 206          void piano(void) {
 207   1        unsigned char play = 1; //boolean for quiting the piano mode
 208   1        light4 = 0; light5 = 0; light6 = 0; //turn on piano key lights
 209   1        while(play) {
 210   2          
 211   2          //first key
 212   2          if (!button4) {
 213   3            light4 = 1;
 214   3            playsound(5, 7);
 215   3            light4 = 0;
 216   3          }
 217   2          
 218   2          //second key
 219   2          if (!button5) {
 220   3            light5 = 1;
 221   3            playsound(5, 5);
 222   3            light5 = 0;
 223   3          }
 224   2          
 225   2          //third key
 226   2          if (!button6) {
 227   3            light6 = 1;
 228   3            playsound(5, 3);
 229   3            light6 = 0;
 230   3          }
 231   2          
 232   2          //exit button
 233   2          if (!button8) {
 234   3            light4 = 1; light5 = 1; light6 = 1;
 235   3            delay(buttonDelay);
 236   3            play = 0;
 237   3          }
C51 COMPILER V9.54   PROJ                                                                  05/07/2017 18:27:06 PAGE 5   

 238   2        }
 239   1      }
 240          
 241          
 242          //plays a sound for a duration and del determines pitch
 243          void playsound(unsigned int dur, unsigned int del) {
 244   1        unsigned int i;
 245   1        for (i=0; i<dur; i++) {
 246   2          speaker = ~speaker;
 247   2          delay(del);
 248   2        }
 249   1      }
 250          
 251          //delay for a time
 252          void delay (unsigned int time) {
 253   1        unsigned int i, j;
 254   1        for (i=0; i < time; i++) {
 255   2          for (j=0; j<5;j++) {
 256   3          }
 257   2        }
 258   1      }
 259          
 260          void uart_init (void) {
 261   1        // configure UART
 262   1        // clear SMOD0
 263   1        PCON &= ~0x40;
 264   1        SCON = 0x50;
 265   1        // set or clear SMOD1
 266   1        PCON &= 0x7F;
 267   1        PCON |= (0 << 8);
 268   1        SSTAT = 0x00;
 269   1      
 270   1        // enable break detect
 271   1        AUXR1 |= 0x40;
 272   1      
 273   1        // configure baud rate generator
 274   1        
 275   1        BRGCON = 0x00;
 276   1        BRGR0 = 0xF0;
 277   1        BRGR1 = 0x02;
 278   1        BRGCON = 0x03;
 279   1        /**/
 280   1        /*
 281   1        EA = 1;
 282   1        ET1 = 1;
 283   1        TMOD = 0x21;
 284   1        TH1 = -6;
 285   1        TR1 = 1;
 286   1        /**/
 287   1      
 288   1        // TxD = push-pull, RxD = input
 289   1        P1M1 = 0x02;
 290   1        P1M2 = 0x01;
 291   1      
 292   1        // initially not busy
 293   1        mtxbusy = 0;
 294   1      
 295   1        // set isr priority to 0
 296   1        IP0 = 1;
 297   1        IP0H = 1;
 298   1        
 299   1        // enable uart interrupt
C51 COMPILER V9.54   PROJ                                                                  05/07/2017 18:27:06 PAGE 6   

 300   1        ES = 1;
 301   1        EA = 1;
 302   1      
 303   1      
 304   1      } // uart_init
 305          
 306          
 307          void uart_isr(void) interrupt 4 using 1 {
 308   1        if (RI)
 309   1        {
 310   2          //do nothing upon receiving stuff
 311   2          
 312   2          // clear interrupt flag
 313   2          RI = 0;
 314   2        }
 315   1      
 316   1        if (TI)
 317   1        {
 318   2          // clear interrupt flag
 319   2          TI = 0;
 320   2          // no longer busy
 321   2          mtxbusy = 0;
 322   2        }
 323   1      }
 324          
 325          void uart_transmit(char c) {
 326   1        while(mtxbusy);
 327   1        mtxbusy = 1;
 328   1        SBUF = c;
 329   1      }
 330          
 331          void allstar() {
 332   1        
 333   1        //display which mode you are in
 334   1          if (mode == 1) {
 335   2            light3 = 0;
 336   2            light2 = 1;
 337   2          } else if (mode == 2) {
 338   2            light2 = 0;
 339   2            light3 = 1;
 340   2          } else if (mode == 3) {
 341   2            light2 = 0;
 342   2            light3 = 0;
 343   2          }
 344   1          
 345   1          //increment button.
 346   1          if (!button9) {
 347   2            light9 = 0;
 348   2            if (mode >= 3) {
 349   3              mode = 0;
 350   3              delay(buttonDelay);
 351   3            } else {
 352   3              mode++;
 353   3              delay(buttonDelay);
 354   3            }
 355   2            light9 = 1;
 356   2          }
 357   1          
 358   1          //decrement button
 359   1          if (!button7) {
 360   2            light7 = 0;
 361   2            if (mode <= 1) {
C51 COMPILER V9.54   PROJ                                                                  05/07/2017 18:27:06 PAGE 7   

 362   3              mode = 3;
 363   3              delay(buttonDelay);
 364   3            } else {
 365   3              mode--;
 366   3              delay(buttonDelay);
 367   3            }
 368   2            light7 = 1;
 369   2          }
 370   1          
 371   1          if (!button8) {
 372   2            index = 0;
 373   2          }
 374   1        
 375   1        for(index = 0; index < 25; index++) {
 376   2          //display which mode you are in
 377   2          if (mode == 1) {
 378   3            light3 = 0;
 379   3            light2 = 1;
 380   3          } else if (mode == 2) {
 381   3            light2 = 0;
 382   3            light3 = 1;
 383   3          } else if (mode == 3) {
 384   3            light2 = 0;
 385   3            light3 = 0;
 386   3          }
 387   2          
 388   2          //increment button.
 389   2          if (!button9) {
 390   3            light9 = 0;
 391   3            if (mode >= 3) {
 392   4              mode = 0;
 393   4            } else {
 394   4              mode++;
 395   4            }
 396   3            light9 = 1;
 397   3          }
 398   2          
 399   2          //decrement button
 400   2          if (!button7) {
 401   3            light7 = 0;
 402   3            if (mode <= 1) {
 403   4              mode = 3;
 404   4            } else {
 405   4              mode--;
 406   4            }
 407   3            light7 = 1;
 408   3          } 
 409   2          
 410   2          delay(200);
 411   2          if (SmashMouth[index] != 0) {
 412   3            freq = SmashMouth[index];
 413   3            dur = durSmashMouth[index] * 500;
 414   3            TR0 = 1;
 415   3            delay(dur);
 416   3          } else if (SmashMouth[index] == 0) {
 417   3            TR0 = 0;
 418   3            dur = durSmashMouth[index];
 419   3            delay(dur * 500);
 420   3          } else {
 421   3            TR0 = 0;
 422   3          }
 423   2        }
C51 COMPILER V9.54   PROJ                                                                  05/07/2017 18:27:06 PAGE 8   

 424   1      }
 425          
 426          void rickroll() {
 427   1        for(index = 0; index < 30; index++) {
 428   2          
 429   2          //display which mode you are in
 430   2          if (mode == 1) {
 431   3            light3 = 0;
 432   3            light2 = 1;
 433   3          } else if (mode == 2) {
 434   3            light2 = 0;
 435   3            light3 = 1;
 436   3          } else if (mode == 3) {
 437   3            light2 = 0;
 438   3            light3 = 0;
 439   3          }
 440   2          
 441   2          //increment button.
 442   2          if (!button9) {
 443   3            light9 = 0;
 444   3            if (mode >= 3) {
 445   4              mode = 0;
 446   4            } else {
 447   4              mode++;
 448   4            }
 449   3            light9 = 1;
 450   3          }
 451   2          
 452   2          //decrement button
 453   2          if (!button7) {
 454   3            light7 = 0;
 455   3            if (mode <= 1) {
 456   4              mode = 3;
 457   4            } else {
 458   4              mode--;
 459   4            }
 460   3            light7 = 1;
 461   3          }
 462   2          
 463   2          delay(200);
 464   2          if (GiveYouUp[index] != 0) {
 465   3            freq = GiveYouUp[index];
 466   3            dur = durGiveYouUp[index] * 500;
 467   3            TR0 = 1;
 468   3            delay(dur);
 469   3          } else if (GiveYouUp[index] == 0) {
 470   3            TR0 = 0;
 471   3            dur = durGiveYouUp[index];
 472   3            delay(dur * 500);
 473   3          } else {
 474   3            TR0 = 0;
 475   3          }
 476   2        }
 477   1      }
 478          
 479          void sqr_wave() interrupt 1 {
 480   1        speaker = ~speaker;
 481   1        TH0 = -(freq)>>8;
 482   1        TL0 = -(freq);
 483   1      }


C51 COMPILER V9.54   PROJ                                                                  05/07/2017 18:27:06 PAGE 9   

MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1046    ----
   CONSTANT SIZE    =    220    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
